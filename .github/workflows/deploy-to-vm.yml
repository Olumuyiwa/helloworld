name: Deploy to VM

on:
  push:
    branches:
      - deploy-to-vm  # Trigger the workflow on pushes to the 'deploy-to-vm' branch

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Check out the repository code

      - name: Set up JDK 17
        uses: actions/setup-java@v3  # Set up JDK 17 using the Temurin distribution
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package  # Build the project using Maven, producing the JAR file

  test:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    needs: build  # This job depends on the build job

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Check out the repository code again

      - name: Set up JDK 17
        uses: actions/setup-java@v3  # Set up JDK 17 using the Temurin distribution
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run tests with Maven
        run: mvn test  # Run the tests using Maven

  deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    needs: test  # This job depends on the test job

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Check out the repository code again

      - name: Set up JDK 17
        uses: actions/setup-java@v3  # Set up JDK 17 using the Temurin distribution
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > private_key.pem  # Write the SSH private key to a file
          chmod 600 private_key.pem  # Change the file permissions to make it secure

      - name: Copy JAR to VM
        run: |
          scp -o StrictHostKeyChecking=no -i private_key.pem target/*.jar ${{ secrets.GCP_SSH_USERNAME }}@${{ secrets.GCP_INSTANCE_IP }}:/home/${{ secrets.GCP_SSH_USERNAME }}/myapp/app.jar  # Copy the JAR file to the VM

      - name: Deploy on VM
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.GCP_SSH_USERNAME }}@${{ secrets.GCP_INSTANCE_IP }} << 'EOF'
            sudo apt-get update  # Update the package list on the VM
            sudo apt-get install -y openjdk-17-jre-headless  # Install Java 17 runtime on the VM

            # Check if the directories exist and create them if they don't
            if [ ! -d "/home/${{ secrets.GCP_SSH_USERNAME }}/myapp/live" ]; then
              mkdir -p /home/${{ secrets.GCP_SSH_USERNAME }}/myapp/live
            fi
            if [ ! -d "/home/${{ secrets.GCP_SSH_USERNAME }}/myapp/archive" ]; then
              mkdir -p /home/${{ secrets.GCP_SSH_USERNAME }}/myapp/archive
            fi

            # Check if the application is running
            if pgrep -f "hello-world.jar"; then
              # Stop the application
              pkill -f "hello-world.jar"
              # Rename the current JAR file with timestamp and move to archive
              timestamp=\$(date +%Y%m%d%H%M%S)
              mv /home/${{ secrets.GCP_SSH_USERNAME }}/myapp/live/hello-world.jar /home/${{ secrets.GCP_SSH_USERNAME }}/myapp/archive/hello-world_\$timestamp.jar
            fi

            # Move the new JAR file to the live folder and rename it
            mv /home/${{ secrets.GCP_SSH_USERNAME }}/myapp/app.jar /home/${{ secrets.GCP_SSH_USERNAME }}/myapp/live/hello-world.jar

            # Start the application
            nohup java -jar /home/${{ secrets.GCP_SSH_USERNAME }}/myapp/live/hello-world.jar > /home/${{ secrets.GCP_SSH_USERNAME }}/myapp/live/app.log 2>&1 &

            # Check if the application is running
            sleep 10  # Wait for a few seconds to give the application time to start
            if pgrep -f "hello-world.jar"; then
              echo "Application is running."
            else
              echo "Application failed to start."
              exit 1
            fi
          EOF
